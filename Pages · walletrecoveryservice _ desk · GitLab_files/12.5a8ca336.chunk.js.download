(this.webpackJsonp=this.webpackJsonp||[]).push([[12],{"/9qn":function(e,n,i){"use strict";i.d(n,"f",(function(){return p})),i.d(n,"j",(function(){return S})),i.d(n,"h",(function(){return b})),i.d(n,"d",(function(){return N})),i.d(n,"i",(function(){return g})),i.d(n,"g",(function(){return F})),i.d(n,"k",(function(){return _})),i.d(n,"m",(function(){return I})),i.d(n,"l",(function(){return D})),i.d(n,"a",(function(){return L})),i.d(n,"c",(function(){return B})),i.d(n,"b",(function(){return P})),i.d(n,"e",(function(){return A})),i.d(n,"n",(function(){return j})),i.d(n,"o",(function(){return C}));i("B++/"),i("z6RN"),i("47t/"),i("v2fZ"),i("UezY"),i("hG7+"),i("YSE1"),i("b+iX"),i("3UXl"),i("iyoE"),i("lFMf"),i("gOHk"),i("c9hT"),i("ZzK0"),i("BzOf"),i("Tznw"),i("IYH6"),i("6yen"),i("OeRx"),i("l/dT"),i("RqS2"),i("Zy7a"),i("cjZU"),i("OAhk"),i("X42P"),i("mHhP"),i("fn0I"),i("UB/6"),i("imhG"),i("RFHG"),i("xuo1");var a=i("b9Gi"),t=i("4wgn"),d=i("FxFN"),r=i("SNRI"),o=i("3twG"),s=i("/lV4"),l=i("W4cT"),u=i("LxhL"),c=i("JtyA"),m=i("5yoc"),f=i("7Aw+"),v=i("AxUD"),k=i("bXWw");const p=function(){return[c.WORK_ITEM_TYPE_ENUM_ISSUE,c.WORK_ITEM_TYPE_ENUM_INCIDENT,c.WORK_ITEM_TYPE_ENUM_TASK]},S=function(){return[{icon:"issue-type-issue",title:Object(s.s__)("WorkItem|Issue"),value:"issue"},{icon:"issue-type-incident",title:Object(s.s__)("WorkItem|Incident"),value:"incident"},{icon:"issue-type-task",title:Object(s.s__)("WorkItem|Task"),value:"task"}]},b=function(e,n=(null!=e?e:u.a),i,a,t){return{firstPageSize:i?void 0:n,lastPageSize:i,afterCursor:a,beforeCursor:t}},N=function({sort:e,sortMap:n,state:i=v.STATUS_OPEN}){const a=i===v.STATUS_CLOSED?k.P:k.j,t=function(e,n=k.W){return Object.keys(n).find((function(i){return n[i]===e}))}(e,n),d=function(e,n=k.W){return Object.keys(n).includes(e)}(null==e?void 0:e.toUpperCase(),n)&&e.toUpperCase();return t||d||a},g=function({hasBlockedIssuesFeature:e,hasIssuableHealthStatusFeature:n,hasIssueWeightsFeature:i,hasManualSort:a=!0,hasMergedDate:t=!1}={}){const d=[{id:1,title:Object(s.__)("Priority"),sortDirection:{ascending:k.J,descending:k.K}},{id:2,title:Object(s.__)("Created date"),sortDirection:{ascending:k.i,descending:k.j}},{id:3,title:Object(s.__)("Updated date"),sortDirection:{ascending:k.O,descending:k.P}},{id:4,title:Object(s.__)("Closed date"),sortDirection:{ascending:k.f,descending:k.g}},{id:5,title:Object(s.__)("Milestone due date"),sortDirection:{ascending:k.x,descending:k.y}},{id:6,title:Object(s.__)("Due date"),sortDirection:{ascending:k.k,descending:k.l}},{id:7,title:Object(s.__)("Popularity"),sortDirection:{ascending:k.H,descending:k.I}},{id:8,title:Object(s.__)("Label priority"),sortDirection:{ascending:k.s,descending:k.t}},a&&{id:9,title:Object(s.__)("Manual"),sortDirection:{ascending:k.L,descending:k.L}},{id:10,title:Object(s.__)("Title"),sortDirection:{ascending:k.M,descending:k.N}}];return t&&d.push({id:d.length+1,title:Object(s.s__)("SortOptions|Merged date"),sortDirection:{ascending:k.v,descending:k.w}}),n&&d.push({id:d.length+1,title:Object(s.__)("Health"),sortDirection:{ascending:k.m,descending:k.n}}),i&&d.push({id:d.length+1,title:Object(s.__)("Weight"),sortDirection:{ascending:k.R,descending:k.S}}),e&&d.push({id:d.length+1,title:Object(s.__)("Blocking"),sortDirection:{ascending:k.c,descending:k.d}}),d.filter((function(e){return e}))},h=Object.keys(k.U),y=function(e){return Object.values(k.U[e][k.Q]).flatMap((function(e){return Object.values(e)}))},E=h.flatMap(y),F=function(e){return Array.from(new URLSearchParams(e).entries()).filter((function([e]){return E.includes(e)})).map((function([e,n]){const i=(a=e,h.find((function(e){return y(e).includes(a)})));var a;return{type:i,value:{data:n,operator:function(e,n){return Object.entries(k.U[e][k.Q]).find((function([,e]){return Object.values(e).includes(n)}))[0]}(i,e)}}}))};function _(e,n){const i=[],a=n.filter((function(e){return e.multiSelect})).map((function(e){return e.type}));return e.forEach((function(e){if(!(l.q.includes(e.value.operator)&&a.includes(e.type)))return void i.push(e);const n=i.find((function(n){return n.type===e.type&&n.value.operator===e.value.operator}));n?n.value.data.includes(e.value.data)||n.value.data.push(e.value.data):i.push({...e,value:{...e.value,data:[e.value.data]}})})),i}const I=function(e){return!(e.type===l.d&&!e.value.data)},D=function(e,n){return e===l.hb&&Object(r.e)(n)&&Object(o.q)(k.A)===n},T=function(e,n){return e===l.vb&&(null==n?void 0:n.includes("&"))},w=function({type:e,value:{data:n,operator:i}}){const a=e===l.ib&&i===l.v,t=e===l.xb&&i===l.v,d=i===l.r;return a||t||D(e,n)||T(e,n)||d?k.a:k.X.includes(n)?k.T:k.z},O=[l.hb,l.rb,l.ub,l.vb,l.zb,l.Db,l.Eb,l.Lb],V=function(e,n){return e===l.Jb||function(e,n){return O.includes(e)&&k.X.includes(n)}(e,n)};const L=function(e){const n=new Map,i=new Map,a=new Map;return e.filter(I).forEach((function(e){const r=w(e),o=k.U[e.type][k.b][r];let s;s=e.value.operator===l.u?i:e.value.operator===l.v?a:n;const u=function(e){return V(e.type,e.value.data)?e.value.data.toUpperCase():[l.kb,l.pb].includes(e.type)?"yes"===e.value.data:e.value.data}(e);if(T(e.type,e.value.data)){const[n,i]=u.split("&"),a=(c=i)?Object(d.c)(t.w,Object(d.f)(c)):null,r=n.toUpperCase();s.set(o,s.has(o)?[s.get(o),a].flat():a);const l=k.U[e.type][k.b][k.T];s.set(l,s.has(l)?[s.get(l),r].flat():r)}else s.set(o,s.has(o)?[s.get(o),u].flat():u);var c})),i.size&&n.set("not",Object.fromEntries(i)),a.size&&n.set("or",Object.fromEntries(a)),Object.fromEntries(n)},B=function(e){const n=e.filter(I).reduce((function(e,n){var i;const a=w(n),t=null===(i=k.U[n.type][k.Q][n.value.operator])||void 0===i?void 0:i[a];return e.set(t,e.has(t)?[e.get(t),n.value.data].flat():n.value.data)}),new Map);return Object.fromEntries(n)},P=function(e){return e.filter((function(e){return e.type===l.d&&e.value.data})).map((function(e){return e.value.data})).join(" ")||void 0};function A(e,n){var i;return null==n||null===(i=n.widgets)||void 0===i?void 0:i.find((function(n){return n.type===e}))}function j({list:e,workItem:n,isBoard:i=!1,namespace:t=f.d.project,type:r}){const o=r+"s";return Object(a.a)(e,(function(e){const a=(i?e[t].board.lists.nodes[0][o].nodes:e[t][o].nodes).find((function(e){return r===v.TYPE_EPIC?e.iid===n.iid:Object(d.f)(e.id)===Object(d.f)(n.id)}));Object.keys(c.WORK_ITEM_TO_ISSUABLE_MAP).forEach((function(e){const i=A(e,n);if(!i)return;const t=c.WORK_ITEM_TO_ISSUABLE_MAP[e];t!==c.WORK_ITEM_TO_ISSUABLE_MAP[c.WIDGET_TYPE_ASSIGNEES]&&t!==c.WORK_ITEM_TO_ISSUABLE_MAP[c.WIDGET_TYPE_LABELS]?t===c.WORK_ITEM_TO_ISSUABLE_MAP[c.WIDGET_TYPE_MILESTONE]&&i[t]?a[t]={__persist:!0,...i[t]}:a[t]=i[t]:a[t]={...i[t],nodes:i[t].nodes.map((function(e){return{__persist:!0,...e}}))}})),a.title=n.title,a.confidential=n.confidential}))}function C({list:e,workItem:n,namespace:i=f.d.project}){const t=c.WIDGET_TYPE_AWARD_EMOJI,d=c.WORK_ITEM_TO_ISSUABLE_MAP[t];return Object(a.a)(e,(function(e){var a,r,o,s;const l=e[i].issues.nodes.find((function(e){return e.iid===n.iid})),u=A(t,n);if(!u)return;const c=null!==(a=null===(r=u[d].nodes.filter((function(e){return e.name===m.i})))||void 0===r?void 0:r.length)&&void 0!==a?a:0,f=null!==(o=null===(s=u[d].nodes.filter((function(e){return e.name===m.h})))||void 0===s?void 0:s.length)&&void 0!==o?o:0;l.upvotes=c,l.downvotes=f}))}},"4/10":function(e,n,i){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"CreateIssue"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"CreateIssueInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"createIssuable"},name:{kind:"Name",value:"createIssue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Issue"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:217}};a.loc.source={body:'#import "ee_else_ce/boards/graphql/issue.fragment.graphql"\n\nmutation CreateIssue($input: CreateIssueInput!) {\n  createIssuable: createIssue(input: $input) {\n    issuable: issue {\n      ...Issue\n    }\n    errors\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("tK5E").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.CreateIssue=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"CreateIssue")},"7+7h":function(e,n){var i={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"boardEpicSetSubscription"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableSubscription"},name:{kind:"Name",value:"epicSetSubscription"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"groupPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"subscribedState"},value:{kind:"Variable",name:{kind:"Name",value:"subscribedState"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:300}};i.loc.source={body:"mutation boardEpicSetSubscription($fullPath: ID!, $iid: ID!, $subscribedState: Boolean!) {\n  updateIssuableSubscription: epicSetSubscription(\n    input: { groupPath: $fullPath, iid: $iid, subscribedState: $subscribedState }\n  ) {\n    issuable: epic {\n      id\n      subscribed\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}i.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),a[e.name.value]=n}})),e.exports=i,e.exports.boardEpicSetSubscription=function(e,n){var i={kind:e.kind,definitions:[t(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var d=a[n]||new Set,r=new Set,o=new Set;for(d.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){o.add(e)})))}))}return r.forEach((function(n){var a=t(e,n);a&&i.definitions.push(a)})),i}(i,"boardEpicSetSubscription")},"7Aw+":function(e,n,i){"use strict";i.d(n,"d",(function(){return j})),i.d(n,"i",(function(){return C})),i.d(n,"j",(function(){return $})),i.d(n,"n",(function(){return U})),i.d(n,"h",(function(){return q})),i.d(n,"m",(function(){return M})),i.d(n,"l",(function(){return x})),i.d(n,"o",(function(){return G})),i.d(n,"g",(function(){return z})),i.d(n,"a",(function(){return W})),i.d(n,"k",(function(){return R})),i.d(n,"f",(function(){return Y})),i.d(n,"e",(function(){return Q})),i.d(n,"c",(function(){return K})),i.d(n,"b",(function(){return J}));var a=i("TMKz"),t=i.n(a),d=i("AxUD"),r=i("/lV4"),o=i("4wgn"),s=i("7+7h"),l=i.n(s),u=i("wCwB"),c=i.n(u),m=i("d1tU"),f=i.n(m),v=i("BtBz"),k=i.n(v),p=i("ejY/"),S=i.n(p),b=i("ch/h"),N=i.n(b),g=i("pBJd"),h=i.n(g),y=i("tZv5"),E=i.n(y),F=i("E0c1"),_=i.n(F),I=i("4/10"),D=i.n(I),T=i("rC+a"),w=i.n(T),O=i("s9gT"),V=i.n(O),L=i("9+w6"),B=i.n(L),P=i("8KMy"),A=i.n(P);const j={project:"project",group:"group"},C={assignee:"assignee",milestone:"milestone",iteration:"iteration",backlog:"backlog",closed:"closed",label:"label"},$={assignee:Object(r.__)("Assignee"),milestone:Object(r.__)("Milestone"),iteration:Object(r.__)("Iteration"),label:Object(r.__)("Label"),backlog:Object(r.__)("Open")},U={new:"new",delete:"delete",edit:"edit"},q="INCIDENT",M=2e3,x={[d.WORKSPACE_GROUP]:{query:w.a},[d.WORKSPACE_PROJECT]:{query:V.a}},G=(d.TYPE_ISSUE,t.a,d.TYPE_ISSUE,A.a,d.TYPE_ISSUE,f.a,d.TYPE_ISSUE,S.a,d.TYPE_ISSUE,N.a,d.TYPE_ISSUE,k.a,{[d.TYPE_ISSUE]:{mutation:E.a},[d.TYPE_EPIC]:{mutation:c.a}}),z=(d.TYPE_ISSUE,h.a,d.TYPE_EPIC,l.a,d.TYPE_ISSUE,B.a,_.a,D.a,o.u,{[d.TYPE_ISSUE]:["assigneeUsername","assigneeWildcardId","authorUsername","confidential","labelName","milestoneTitle","milestoneWildcardId","myReactionEmoji","releaseTag","search","types","weight"]}),W={any:"Any",none:"None"},R={any:"Any",none:"None",started:"Started",upcoming:"Upcoming"},Y={card:"card",list:"list"};const Q=10,K=Object(r.s__)("Boards|Move to start of list"),H=Object(r.s__)("Boards|Move to end of list"),J=[{text:K,action:function(){}},{text:H,action:function(){}}]},"8KMy":function(e,n){var i={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"BoardListCount"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"id"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ListID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"filters"}},type:{kind:"NamedType",name:{kind:"Name",value:"BoardIssueInput"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"boardList"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}},{kind:"Argument",name:{kind:"Name",value:"issueFilters"},value:{kind:"Variable",name:{kind:"Name",value:"filters"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"issuesCount"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:140}};i.loc.source={body:"query BoardListCount($id: ListID!, $filters: BoardIssueInput) {\n  boardList(id: $id, issueFilters: $filters) {\n    id\n    issuesCount\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}i.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),a[e.name.value]=n}})),e.exports=i,e.exports.BoardListCount=function(e,n){var i={kind:e.kind,definitions:[t(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var d=a[n]||new Set,r=new Set,o=new Set;for(d.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){o.add(e)})))}))}return r.forEach((function(n){var a=t(e,n);a&&i.definitions.push(a)})),i}(i,"BoardListCount")},"9+w6":function(e,n,i){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"BoardListsEE"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"boardId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"BoardID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"id"}},type:{kind:"NamedType",name:{kind:"Name",value:"ListID"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"filters"}},type:{kind:"NamedType",name:{kind:"Name",value:"BoardIssueInput"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"isGroup"}},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},defaultValue:{kind:"BooleanValue",value:!1},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"isProject"}},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},defaultValue:{kind:"BooleanValue",value:!1},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"after"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"first"}},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"include"},arguments:[{kind:"Argument",name:{kind:"Name",value:"if"},value:{kind:"Variable",name:{kind:"Name",value:"isGroup"}}}]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"board"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"boardId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"lists"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}},{kind:"Argument",name:{kind:"Name",value:"issueFilters"},value:{kind:"Variable",name:{kind:"Name",value:"filters"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"listType"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"issues"},arguments:[{kind:"Argument",name:{kind:"Name",value:"first"},value:{kind:"Variable",name:{kind:"Name",value:"first"}}},{kind:"Argument",name:{kind:"Name",value:"filters"},value:{kind:"Variable",name:{kind:"Name",value:"filters"}}},{kind:"Argument",name:{kind:"Name",value:"after"},value:{kind:"Variable",name:{kind:"Name",value:"after"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Issue"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"pageInfo"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"endCursor"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"hasNextPage"},arguments:[],directives:[]}]}}]}}]}}]}}]}}]}},{kind:"Field",name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"include"},arguments:[{kind:"Argument",name:{kind:"Name",value:"if"},value:{kind:"Variable",name:{kind:"Name",value:"isProject"}}}]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"board"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"boardId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"lists"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}},{kind:"Argument",name:{kind:"Name",value:"issueFilters"},value:{kind:"Variable",name:{kind:"Name",value:"filters"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"listType"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"issues"},arguments:[{kind:"Argument",name:{kind:"Name",value:"first"},value:{kind:"Variable",name:{kind:"Name",value:"first"}}},{kind:"Argument",name:{kind:"Name",value:"filters"},value:{kind:"Variable",name:{kind:"Name",value:"filters"}}},{kind:"Argument",name:{kind:"Name",value:"after"},value:{kind:"Variable",name:{kind:"Name",value:"after"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Issue"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"pageInfo"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"endCursor"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"hasNextPage"},arguments:[],directives:[]}]}}]}}]}}]}}]}}]}}]}}],loc:{start:0,end:1145}};a.loc.source={body:'#import "ee_else_ce/boards/graphql/issue.fragment.graphql"\n\nquery BoardListsEE(\n  $fullPath: ID!\n  $boardId: BoardID!\n  $id: ListID\n  $filters: BoardIssueInput\n  $isGroup: Boolean = false\n  $isProject: Boolean = false\n  $after: String\n  $first: Int\n) {\n  group(fullPath: $fullPath) @include(if: $isGroup) {\n    id\n    board(id: $boardId) {\n      id\n      lists(id: $id, issueFilters: $filters) {\n        nodes {\n          id\n          listType\n          issues(first: $first, filters: $filters, after: $after) {\n            nodes {\n              ...Issue\n            }\n            pageInfo {\n              endCursor\n              hasNextPage\n            }\n          }\n        }\n      }\n    }\n  }\n  project(fullPath: $fullPath) @include(if: $isProject) {\n    id\n    board(id: $boardId) {\n      id\n      lists(id: $id, issueFilters: $filters) {\n        nodes {\n          id\n          listType\n          issues(first: $first, filters: $filters, after: $after) {\n            nodes {\n              ...Issue\n            }\n            pageInfo {\n              endCursor\n              hasNextPage\n            }\n          }\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("tK5E").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.BoardListsEE=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"BoardListsEE")},BtBz:function(e,n){var i={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"DestroyBoardList"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"listId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ListID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"destroyBoardList"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"listId"},value:{kind:"Variable",name:{kind:"Name",value:"listId"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:112}};i.loc.source={body:"mutation DestroyBoardList($listId: ListID!) {\n  destroyBoardList(input: { listId: $listId }) {\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}i.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),a[e.name.value]=n}})),e.exports=i,e.exports.DestroyBoardList=function(e,n){var i={kind:e.kind,definitions:[t(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var d=a[n]||new Set,r=new Set,o=new Set;for(d.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){o.add(e)})))}))}return r.forEach((function(n){var a=t(e,n);a&&i.definitions.push(a)})),i}(i,"DestroyBoardList")},E0c1:function(e,n,i){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issueMoveList"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"projectPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"iid"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"boardId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"BoardID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fromListId"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"toListId"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"moveBeforeId"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"moveAfterId"}},type:{kind:"NamedType",name:{kind:"Name",value:"ID"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuableMoveList"},name:{kind:"Name",value:"issueMoveList"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"projectPath"},value:{kind:"Variable",name:{kind:"Name",value:"projectPath"}}},{kind:"ObjectField",name:{kind:"Name",value:"iid"},value:{kind:"Variable",name:{kind:"Name",value:"iid"}}},{kind:"ObjectField",name:{kind:"Name",value:"boardId"},value:{kind:"Variable",name:{kind:"Name",value:"boardId"}}},{kind:"ObjectField",name:{kind:"Name",value:"fromListId"},value:{kind:"Variable",name:{kind:"Name",value:"fromListId"}}},{kind:"ObjectField",name:{kind:"Name",value:"toListId"},value:{kind:"Variable",name:{kind:"Name",value:"toListId"}}},{kind:"ObjectField",name:{kind:"Name",value:"moveBeforeId"},value:{kind:"Variable",name:{kind:"Name",value:"moveBeforeId"}}},{kind:"ObjectField",name:{kind:"Name",value:"moveAfterId"},value:{kind:"Variable",name:{kind:"Name",value:"moveAfterId"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"issuable"},name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Issue"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:532}};a.loc.source={body:'#import "ee_else_ce/boards/graphql/issue.fragment.graphql"\n\nmutation issueMoveList(\n  $projectPath: ID!\n  $iid: String!\n  $boardId: BoardID!\n  $fromListId: ID\n  $toListId: ID\n  $moveBeforeId: ID\n  $moveAfterId: ID\n) {\n  issuableMoveList: issueMoveList(\n    input: {\n      projectPath: $projectPath\n      iid: $iid\n      boardId: $boardId\n      fromListId: $fromListId\n      toListId: $toListId\n      moveBeforeId: $moveBeforeId\n      moveAfterId: $moveAfterId\n    }\n  ) {\n    issuable: issue {\n      ...Issue\n    }\n    errors\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("tK5E").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.issueMoveList=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"issueMoveList")},IgWM:function(e,n,i){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"BoardListFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"BoardList"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"BoardListShared"},directives:[]}]}}],loc:{start:0,end:113}};a.loc.source={body:'#import "./board_list_shared.fragment.graphql"\n\nfragment BoardListFragment on BoardList {\n  ...BoardListShared\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("OFHv").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.BoardListFragment=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"BoardListFragment")},OFHv:function(e,n){var i={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"BoardListShared"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"BoardList"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"position"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"listType"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"collapsed"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"label"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"color"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"textColor"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"description"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"descriptionHtml"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:180}};i.loc.source={body:"fragment BoardListShared on BoardList {\n  id\n  title\n  position\n  listType\n  collapsed\n  label {\n    id\n    title\n    color\n    textColor\n    description\n    descriptionHtml\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}i.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),a[e.name.value]=n}})),e.exports=i,e.exports.BoardListShared=function(e,n){var i={kind:e.kind,definitions:[t(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var d=a[n]||new Set,r=new Set,o=new Set;for(d.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){o.add(e)})))}))}return r.forEach((function(n){var a=t(e,n);a&&i.definitions.push(a)})),i}(i,"BoardListShared")},TMKz:function(e,n,i){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"ListIssues"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"boardId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"BoardID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"listId"}},type:{kind:"NamedType",name:{kind:"Name",value:"ListID"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"filters"}},type:{kind:"NamedType",name:{kind:"Name",value:"BoardIssueInput"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"isGroup"}},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},defaultValue:{kind:"BooleanValue",value:!1},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"isProject"}},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},defaultValue:{kind:"BooleanValue",value:!1},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"include"},arguments:[{kind:"Argument",name:{kind:"Name",value:"if"},value:{kind:"Variable",name:{kind:"Name",value:"isGroup"}}}]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"board"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"boardId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"hideBacklogList"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"lists"},arguments:[{kind:"Argument",name:{kind:"Name",value:"issueFilters"},value:{kind:"Variable",name:{kind:"Name",value:"filters"}}},{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"listId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"BoardListFragment"},directives:[]}]}}]}}]}}]}},{kind:"Field",name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"include"},arguments:[{kind:"Argument",name:{kind:"Name",value:"if"},value:{kind:"Variable",name:{kind:"Name",value:"isProject"}}}]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"board"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"boardId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"hideBacklogList"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"lists"},arguments:[{kind:"Argument",name:{kind:"Name",value:"issueFilters"},value:{kind:"Variable",name:{kind:"Name",value:"filters"}}},{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"listId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"BoardListFragment"},directives:[]}]}}]}}]}}]}}]}}],loc:{start:0,end:723}};a.loc.source={body:'#import "ee_else_ce/boards/graphql/board_list.fragment.graphql"\n\nquery ListIssues(\n  $fullPath: ID!\n  $boardId: BoardID!\n  $listId: ListID\n  $filters: BoardIssueInput\n  $isGroup: Boolean = false\n  $isProject: Boolean = false\n) {\n  group(fullPath: $fullPath) @include(if: $isGroup) {\n    id\n    board(id: $boardId) {\n      id\n      hideBacklogList\n      lists(issueFilters: $filters, id: $listId) {\n        nodes {\n          ...BoardListFragment\n        }\n      }\n    }\n  }\n  project(fullPath: $fullPath) @include(if: $isProject) {\n    id\n    board(id: $boardId) {\n      id\n      hideBacklogList\n      lists(issueFilters: $filters, id: $listId) {\n        nodes {\n          ...BoardListFragment\n        }\n      }\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("kqY5").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.ListIssues=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"ListIssues")},Z430:function(e,n,i){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"BoardScopeFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Board"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"hideBacklogList"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"hideClosedList"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignee"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"Label"},directives:[]}]}}]}},{kind:"Field",name:{kind:"Name",value:"iteration"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"iterationCadence"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"durationInWeeks"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"weight"},arguments:[],directives:[]}]}}],loc:{start:0,end:426}};a.loc.source={body:'#import "~/graphql_shared/fragments/user.fragment.graphql"\n#import "~/graphql_shared/fragments/label.fragment.graphql"\n\nfragment BoardScopeFragment on Board {\n  id\n  name\n  hideBacklogList\n  hideClosedList\n  assignee {\n    ...User\n  }\n  milestone {\n    id\n    title\n  }\n  labels {\n    nodes {\n      ...Label\n    }\n  }\n  iteration {\n    id\n    title\n  }\n  iterationCadence {\n    id\n    title\n    durationInWeeks\n  }\n  weight\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)}))}a.definitions=a.definitions.concat(d(i("aBoS").definitions)),a.definitions=a.definitions.concat(d(i("30z/").definitions));var r={};function o(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),r[e.name.value]=n}})),e.exports=a,e.exports.BoardScopeFragment=function(e,n){var i={kind:e.kind,definitions:[o(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=r[n]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(n){var a=o(e,n);a&&i.definitions.push(a)})),i}(a,"BoardScopeFragment")},bXWw:function(e,n,i){"use strict";i.d(n,"r",(function(){return d})),i.d(n,"u",(function(){return r})),i.d(n,"A",(function(){return o})),i.d(n,"B",(function(){return s})),i.d(n,"C",(function(){return l})),i.d(n,"D",(function(){return u})),i.d(n,"E",(function(){return c})),i.d(n,"F",(function(){return m})),i.d(n,"G",(function(){return f})),i.d(n,"c",(function(){return v})),i.d(n,"d",(function(){return k})),i.d(n,"f",(function(){return p})),i.d(n,"g",(function(){return S})),i.d(n,"i",(function(){return b})),i.d(n,"j",(function(){return N})),i.d(n,"k",(function(){return g})),i.d(n,"l",(function(){return h})),i.d(n,"m",(function(){return y})),i.d(n,"n",(function(){return E})),i.d(n,"s",(function(){return F})),i.d(n,"t",(function(){return _})),i.d(n,"x",(function(){return I})),i.d(n,"y",(function(){return D})),i.d(n,"H",(function(){return T})),i.d(n,"I",(function(){return w})),i.d(n,"J",(function(){return O})),i.d(n,"K",(function(){return V})),i.d(n,"L",(function(){return L})),i.d(n,"M",(function(){return B})),i.d(n,"N",(function(){return P})),i.d(n,"O",(function(){return A})),i.d(n,"P",(function(){return j})),i.d(n,"R",(function(){return C})),i.d(n,"S",(function(){return $})),i.d(n,"v",(function(){return U})),i.d(n,"w",(function(){return q})),i.d(n,"b",(function(){return M})),i.d(n,"Q",(function(){return x})),i.d(n,"z",(function(){return G})),i.d(n,"T",(function(){return z})),i.d(n,"a",(function(){return W})),i.d(n,"q",(function(){return R})),i.d(n,"p",(function(){return Y})),i.d(n,"o",(function(){return Q})),i.d(n,"e",(function(){return K})),i.d(n,"h",(function(){return H})),i.d(n,"V",(function(){return J})),i.d(n,"W",(function(){return Z})),i.d(n,"X",(function(){return X})),i.d(n,"U",(function(){return ee}));var a=i("/lV4"),t=i("W4cT");const d=/^#\d+$/,r=10,o="assignee_id",s="first_page_size",l="last_page_size",u="page_after",c="page_before",m="sort",f="state",v="BLOCKING_ISSUES_ASC",k="BLOCKING_ISSUES_DESC",p="CLOSED_AT_ASC",S="CLOSED_AT_DESC",b="CREATED_ASC",N="CREATED_DESC",g="DUE_DATE_ASC",h="DUE_DATE_DESC",y="HEALTH_STATUS_ASC",E="HEALTH_STATUS_DESC",F="LABEL_PRIORITY_ASC",_="LABEL_PRIORITY_DESC",I="MILESTONE_DUE_ASC",D="MILESTONE_DUE_DESC",T="POPULARITY_ASC",w="POPULARITY_DESC",O="PRIORITY_ASC",V="PRIORITY_DESC",L="RELATIVE_POSITION_ASC",B="TITLE_ASC",P="TITLE_DESC",A="UPDATED_ASC",j="UPDATED_DESC",C="WEIGHT_ASC",$="WEIGHT_DESC",U="MERGED_AT_ASC",q="MERGED_AT_DESC",M="apiParam",x="urlParam",G="normalFilter",z="wildcardFilter",W="alternativeFilter",R="issuesViewType",Y="List",Q="Grid",K=Object(a.__)("Closed"),H=Object(a.__)("Closed (moved)"),J={actionsLabel:Object(a.__)("Actions"),closed:K,closedMoved:H,confidentialNo:Object(a.__)("No"),confidentialYes:Object(a.__)("Yes"),downvotes:Object(a.__)("Downvotes"),errorFetchingCounts:Object(a.__)("An error occurred while getting issue counts"),errorFetchingIssues:Object(a.__)("An error occurred while loading issues"),issueRepositioningMessage:Object(a.__)("Issues are being rebalanced at the moment, so manual reordering is disabled."),upvotes:Object(a.__)("Upvotes"),titles:Object(a.__)("Titles"),descriptions:Object(a.__)("Descriptions")},Z={[O]:"priority",[V]:"priority_desc",[b]:"created_asc",[N]:"created_date",[A]:"updated_asc",[j]:"updated_desc",[p]:"closed_at",[S]:"closed_at_desc",[I]:"milestone",[D]:"milestone_due_desc",[g]:"due_date",[h]:"due_date_desc",[T]:"popularity_asc",[w]:"popularity",[F]:"label_priority",[_]:"label_priority_desc",[L]:"relative_position",[B]:"title_asc",[P]:"title_desc",[y]:"health_status_asc",[E]:"health_status_desc",[C]:"weight",[$]:"weight_desc",[v]:"blocking_issues_asc",[k]:"blocking_issues_desc",[U]:"merged_at_asc",[q]:"merged_at_desc"},X=[t.h,t.f,t.g,t.j,t.i],ee={[t.d]:{[M]:{[G]:"search"},[x]:{[void 0]:{[G]:"search"}}},[t.eb]:{[M]:{[G]:"approvedBy",[z]:"approvedBy"},[x]:{[t.t]:{[G]:"approved_by_usernames[]",[z]:"approved_by_usernames[]"},[t.u]:{[G]:"not[approved_by_usernames][]",[z]:"not[approved_by_usernames][]"}}},[t.fb]:{[M]:{[G]:"approver",[z]:"approver"},[x]:{[t.t]:{[G]:"approver[]",[z]:"approver[]"}}},[t.ib]:{[M]:{[G]:"authorUsername",[W]:"authorUsernames"},[x]:{[t.t]:{[G]:"author_username"},[t.u]:{[G]:"not[author_username][]"},[t.v]:{[W]:"or[author_username][]"}}},[t.Fb]:{[M]:{[G]:"in"},[x]:{[t.t]:{[G]:"in"}}},[t.hb]:{[M]:{[G]:"assigneeUsernames",[z]:"assigneeWildcardId",[W]:"assigneeId"},[x]:{[t.t]:{[G]:"assignee_username[]",[z]:"assignee_id",[W]:"assignee_username"},[t.u]:{[G]:"not[assignee_username][]",[W]:"not[assignee_username]"},[t.v]:{[G]:"or[assignee_username][]"}}},[t.sb]:{[M]:{[G]:"fullPath"},[x]:{[t.t]:{[G]:"group_path"}}},[t.Eb]:{[M]:{[G]:"reviewerUsername",[z]:"reviewerWildcardId",[W]:"reviewerId"},[x]:{[t.t]:{[G]:"reviewer_username",[z]:"reviewer_id",[W]:"reviewer_username"},[t.u]:{[G]:"not[reviewer_username]"}}},[t.yb]:{[M]:{[G]:"mergeUser"},[x]:{[t.t]:{[G]:"merge_user"}}},[t.zb]:{[M]:{[G]:"milestoneTitle",[z]:"milestoneWildcardId"},[x]:{[t.t]:{[G]:"milestone_title",[z]:"milestone_title"},[t.u]:{[G]:"not[milestone_title]",[z]:"not[milestone_title]"}}},[t.xb]:{[M]:{[G]:"labelName",[z]:"labelName",[W]:"labelNames"},[x]:{[t.t]:{[G]:"label_name[]",[z]:"label_name[]",[W]:"label_name"},[t.u]:{[G]:"not[label_name][]"},[t.v]:{[W]:"or[label_name][]"}}},[t.Gb]:{[M]:{[G]:"sourceBranches"},[x]:{[t.t]:{[G]:"source_branches[]"}}},[t.Ib]:{[M]:{[G]:"targetBranches"},[x]:{[t.t]:{[G]:"target_branches[]"}}},[t.Jb]:{[M]:{[G]:"types"},[x]:{[t.t]:{[G]:"type[]"},[t.u]:{[G]:"not[type][]"}}},[t.Db]:{[M]:{[G]:"releaseTag",[z]:"releaseTagWildcardId"},[x]:{[t.t]:{[G]:"release_tag",[z]:"release_tag"},[t.u]:{[G]:"not[release_tag]"}}},[t.Ab]:{[M]:{[G]:"myReactionEmoji",[z]:"myReactionEmoji"},[x]:{[t.t]:{[G]:"my_reaction_emoji",[z]:"my_reaction_emoji"},[t.u]:{[G]:"not[my_reaction_emoji]"}}},[t.kb]:{[M]:{[G]:"confidential"},[x]:{[t.t]:{[G]:"confidential"}}},[t.pb]:{[M]:{[G]:"draft"},[x]:{[t.t]:{[G]:"draft"}}},[t.vb]:{[M]:{[G]:"iterationId",[z]:"iterationWildcardId",[W]:"iterationCadenceId"},[x]:{[t.t]:{[G]:"iteration_id",[z]:"iteration_id",[W]:"iteration_cadence_id"},[t.u]:{[G]:"not[iteration_id]",[z]:"not[iteration_id]"}}},[t.rb]:{[M]:{[G]:"epicId",[z]:"epicWildcardId"},[x]:{[t.t]:{[G]:"epic_id",[z]:"epic_id"},[t.u]:{[G]:"not[epic_id]"}}},[t.Lb]:{[M]:{[G]:"weight",[z]:"weightWildcardId"},[x]:{[t.t]:{[G]:"weight",[z]:"weight"},[t.u]:{[G]:"not[weight]"}}},[t.ub]:{[M]:{[G]:"healthStatusFilter",[z]:"healthStatusFilter"},[x]:{[t.t]:{[G]:"health_status",[z]:"health_status"},[t.u]:{[G]:"not[health_status]"}}},[t.lb]:{[M]:{[G]:"crmContactId"},[x]:{[t.t]:{[G]:"crm_contact_id"}}},[t.Bb]:{[M]:{[G]:"crmOrganizationId"},[x]:{[t.t]:{[G]:"crm_organization_id"}}},[t.mb]:{[M]:{[G]:"createdBefore",[W]:"createdAfter"},[x]:{[t.r]:{[W]:"created_after"},[t.s]:{[G]:"created_before"}}},[t.jb]:{[M]:{[G]:"closedBefore",[W]:"closedAfter"},[x]:{[t.r]:{[W]:"closed_after"},[t.s]:{[G]:"closed_before"}}},[t.qb]:{[M]:{[G]:"environmentName"},[x]:{[t.t]:{[G]:"environment"}}},[t.ob]:{[M]:{[G]:"deployedBefore"},[x]:{[t.t]:{[G]:"deployed_before"}}},[t.nb]:{[M]:{[G]:"deployedAfter"},[x]:{[t.t]:{[G]:"deployed_after"}}}}},"ch/h":function(e,n,i){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"toggleListCollapsed"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"list"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"BoardList"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"collapsed"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"clientToggleListCollapsed"},arguments:[{kind:"Argument",name:{kind:"Name",value:"list"},value:{kind:"Variable",name:{kind:"Name",value:"list"}}},{kind:"Argument",name:{kind:"Name",value:"collapsed"},value:{kind:"Variable",name:{kind:"Name",value:"collapsed"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"list"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"BoardListFragment"},directives:[]}]}}]}}]}}],loc:{start:0,end:261}};a.loc.source={body:'#import "ee_else_ce/boards/graphql/board_list.fragment.graphql"\n\nmutation toggleListCollapsed($list: BoardList!, $collapsed: Boolean!) {\n  clientToggleListCollapsed(list: $list, collapsed: $collapsed) @client {\n    list {\n      ...BoardListFragment\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("kqY5").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.toggleListCollapsed=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"toggleListCollapsed")},d1tU:function(e,n,i){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"createBoardList"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"boardId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"BoardID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"backlog"}},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"labelId"}},type:{kind:"NamedType",name:{kind:"Name",value:"LabelID"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"position"}},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"boardListCreate"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"boardId"},value:{kind:"Variable",name:{kind:"Name",value:"boardId"}}},{kind:"ObjectField",name:{kind:"Name",value:"backlog"},value:{kind:"Variable",name:{kind:"Name",value:"backlog"}}},{kind:"ObjectField",name:{kind:"Name",value:"labelId"},value:{kind:"Variable",name:{kind:"Name",value:"labelId"}}},{kind:"ObjectField",name:{kind:"Name",value:"position"},value:{kind:"Variable",name:{kind:"Name",value:"position"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"list"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"BoardListFragment"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:320}};a.loc.source={body:'#import "./board_list.fragment.graphql"\n\nmutation createBoardList($boardId: BoardID!, $backlog: Boolean, $labelId: LabelID, $position: Int) {\n  boardListCreate(\n    input: { boardId: $boardId, backlog: $backlog, labelId: $labelId, position: $position }\n  ) {\n    list {\n      ...BoardListFragment\n    }\n    errors\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("IgWM").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.createBoardList=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"createBoardList")},"ejY/":function(e,n,i){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"UpdateBoardList"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"listId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ListID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"position"}},type:{kind:"NamedType",name:{kind:"Name",value:"Int"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"collapsed"}},type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"updateBoardList"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"listId"},value:{kind:"Variable",name:{kind:"Name",value:"listId"}}},{kind:"ObjectField",name:{kind:"Name",value:"position"},value:{kind:"Variable",name:{kind:"Name",value:"position"}}},{kind:"ObjectField",name:{kind:"Name",value:"collapsed"},value:{kind:"Variable",name:{kind:"Name",value:"collapsed"}}}]}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"list"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"BoardListFragment"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:276}};a.loc.source={body:'#import "./board_list.fragment.graphql"\n\nmutation UpdateBoardList($listId: ListID!, $position: Int, $collapsed: Boolean) {\n  updateBoardList(input: { listId: $listId, position: $position, collapsed: $collapsed }) {\n    list {\n      ...BoardListFragment\n    }\n    errors\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("IgWM").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.UpdateBoardList=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"UpdateBoardList")},kqY5:function(e,n,i){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"BoardListFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"BoardList"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"BoardListShared"},directives:[]},{kind:"Field",name:{kind:"Name",value:"maxIssueCount"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assignee"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"username"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"avatarUrl"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"webUrl"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"webPath"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"description"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"iteration"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"webPath"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"description"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:367}};a.loc.source={body:'#import "~/boards/graphql/board_list_shared.fragment.graphql"\n\nfragment BoardListFragment on BoardList {\n  ...BoardListShared\n  maxIssueCount\n  assignee {\n    id\n    name\n    username\n    avatarUrl\n    webUrl\n  }\n  milestone {\n    id\n    title\n    webPath\n    description\n  }\n  iteration {\n    id\n    title\n    startDate\n    dueDate\n    webPath\n    description\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("OFHv").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.BoardListFragment=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"BoardListFragment")},lHoO:function(e,n,i){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"IssueNode"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Issue"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"iid"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",alias:{kind:"Name",value:"referencePath"},name:{kind:"Name",value:"reference"},arguments:[{kind:"Argument",name:{kind:"Name",value:"full"},value:{kind:"BooleanValue",value:!0}}],directives:[]},{kind:"Field",name:{kind:"Name",value:"closedAt"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"timeEstimate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"totalTimeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTimeEstimate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"humanTotalTimeSpent"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"emailsDisabled"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"confidential"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"hidden"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"webUrl"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relativePosition"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"type"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"severity"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"milestone"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"MilestoneFragment"},directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"assignees"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"User"},directives:[]}]}}]}},{kind:"Field",name:{kind:"Name",value:"labels"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"nodes"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"color"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"description"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:573}};a.loc.source={body:'#import "~/graphql_shared/fragments/milestone.fragment.graphql"\n#import "~/graphql_shared/fragments/user.fragment.graphql"\n\nfragment IssueNode on Issue {\n  id\n  iid\n  title\n  referencePath: reference(full: true)\n  closedAt\n  dueDate\n  timeEstimate\n  totalTimeSpent\n  humanTimeEstimate\n  humanTotalTimeSpent\n  emailsDisabled\n  confidential\n  hidden\n  webUrl\n  relativePosition\n  type\n  severity\n  milestone {\n    ...MilestoneFragment\n  }\n  assignees {\n    nodes {\n      ...User\n    }\n  }\n  labels {\n    nodes {\n      id\n      title\n      color\n      description\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};function d(e){return e.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)}))}a.definitions=a.definitions.concat(d(i("tylY").definitions)),a.definitions=a.definitions.concat(d(i("aBoS").definitions));var r={};function o(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),r[e.name.value]=n}})),e.exports=a,e.exports.IssueNode=function(e,n){var i={kind:e.kind,definitions:[o(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=r[n]||new Set,t=new Set,d=new Set;for(a.forEach((function(e){d.add(e)}));d.size>0;){var s=d;d=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(r[e]||new Set).forEach((function(e){d.add(e)})))}))}return t.forEach((function(n){var a=o(e,n);a&&i.definitions.push(a)})),i}(a,"IssueNode")},pBJd:function(e,n){var i={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issueSetSubscription"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"IssueSetSubscriptionInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableSubscription"},name:{kind:"Name",value:"issueSetSubscription"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"subscribed"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:197}};i.loc.source={body:"mutation issueSetSubscription($input: IssueSetSubscriptionInput!) {\n  updateIssuableSubscription: issueSetSubscription(input: $input) {\n    issue {\n      id\n      subscribed\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}i.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),a[e.name.value]=n}})),e.exports=i,e.exports.issueSetSubscription=function(e,n){var i={kind:e.kind,definitions:[t(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var d=a[n]||new Set,r=new Set,o=new Set;for(d.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){o.add(e)})))}))}return r.forEach((function(n){var a=t(e,n);a&&i.definitions.push(a)})),i}(i,"issueSetSubscription")},"rC+a":function(e,n,i){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GroupBoard"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"boardId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"BoardID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"group"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"board"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"boardId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"BoardScopeFragment"},directives:[]}]}}]}}]}}],loc:{start:0,end:236}};a.loc.source={body:'#import "ee_else_ce/boards/graphql/board_scope.fragment.graphql"\n\nquery GroupBoard($fullPath: ID!, $boardId: BoardID!) {\n  workspace: group(fullPath: $fullPath) {\n    id\n    board(id: $boardId) {\n      ...BoardScopeFragment\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("Z430").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.GroupBoard=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"GroupBoard")},s9gT:function(e,n,i){var a={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"ProjectBoard"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"fullPath"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ID"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"boardId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"BoardID"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"workspace"},name:{kind:"Name",value:"project"},arguments:[{kind:"Argument",name:{kind:"Name",value:"fullPath"},value:{kind:"Variable",name:{kind:"Name",value:"fullPath"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"board"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"boardId"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"BoardScopeFragment"},directives:[]}]}}]}}]}}],loc:{start:0,end:240}};a.loc.source={body:'#import "ee_else_ce/boards/graphql/board_scope.fragment.graphql"\n\nquery ProjectBoard($fullPath: ID!, $boardId: BoardID!) {\n  workspace: project(fullPath: $fullPath) {\n    id\n    board(id: $boardId) {\n      ...BoardScopeFragment\n    }\n  }\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("Z430").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.ProjectBoard=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"ProjectBoard")},tK5E:function(e,n,i){var a={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"Issue"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Issue"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:"IssueNode"},directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"weight"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"blocked"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"blockedByCount"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"iteration"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"dueDate"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"iterationCadence"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]}]}}]}},{kind:"Field",name:{kind:"Name",value:"healthStatus"},arguments:[],directives:[]}]}}],loc:{start:0,end:291}};a.loc.source={body:'#import "~/graphql_shared/fragments/issue.fragment.graphql"\n\nfragment Issue on Issue {\n  ...IssueNode\n  id\n  weight\n  blocked\n  blockedByCount\n  epic {\n    id\n  }\n  iteration {\n    id\n    title\n    startDate\n    dueDate\n    iterationCadence {\n      id\n      title\n    }\n  }\n  healthStatus\n}\n',name:"GraphQL request",locationOffset:{line:1,column:1}};var t={};a.definitions=a.definitions.concat(i("lHoO").definitions.filter((function(e){if("FragmentDefinition"!==e.kind)return!0;var n=e.name.value;return!t[n]&&(t[n]=!0,!0)})));var d={};function r(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}a.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),d[e.name.value]=n}})),e.exports=a,e.exports.Issue=function(e,n){var i={kind:e.kind,definitions:[r(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var a=d[n]||new Set,t=new Set,o=new Set;for(a.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){t.has(e)||(t.add(e),(d[e]||new Set).forEach((function(e){o.add(e)})))}))}return t.forEach((function(n){var a=r(e,n);a&&i.definitions.push(a)})),i}(a,"Issue")},tZv5:function(e,n){var i={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"issueSetTitle"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateIssueInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableTitle"},name:{kind:"Name",value:"updateIssue"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"issue"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:160}};i.loc.source={body:"mutation issueSetTitle($input: UpdateIssueInput!) {\n  updateIssuableTitle: updateIssue(input: $input) {\n    issue {\n      id\n      title\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}i.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),a[e.name.value]=n}})),e.exports=i,e.exports.issueSetTitle=function(e,n){var i={kind:e.kind,definitions:[t(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var d=a[n]||new Set,r=new Set,o=new Set;for(d.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){o.add(e)})))}))}return r.forEach((function(n){var a=t(e,n);a&&i.definitions.push(a)})),i}(i,"issueSetTitle")},tylY:function(e,n){var i={kind:"Document",definitions:[{kind:"FragmentDefinition",name:{kind:"Name",value:"MilestoneFragment"},typeCondition:{kind:"NamedType",name:{kind:"Name",value:"Milestone"}},directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"expired"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"state"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]}]}}],loc:{start:0,end:75}};i.loc.source={body:"fragment MilestoneFragment on Milestone {\n  expired\n  id\n  state\n  title\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}i.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),a[e.name.value]=n}})),e.exports=i,e.exports.MilestoneFragment=function(e,n){var i={kind:e.kind,definitions:[t(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var d=a[n]||new Set,r=new Set,o=new Set;for(d.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){o.add(e)})))}))}return r.forEach((function(n){var a=t(e,n);a&&i.definitions.push(a)})),i}(i,"MilestoneFragment")},wCwB:function(e,n){var i={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"updateEpicTitle"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"input"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UpdateEpicInput"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:{kind:"Name",value:"updateIssuableTitle"},name:{kind:"Name",value:"updateEpic"},arguments:[{kind:"Argument",name:{kind:"Name",value:"input"},value:{kind:"Variable",name:{kind:"Name",value:"input"}}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"epic"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"title"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"errors"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:159}};i.loc.source={body:"mutation updateEpicTitle($input: UpdateEpicInput!) {\n  updateIssuableTitle: updateEpic(input: $input) {\n    epic {\n      id\n      title\n    }\n    errors\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}};var a={};function t(e,n){for(var i=0;i<e.definitions.length;i++){var a=e.definitions[i];if(a.name&&a.name.value==n)return a}}i.definitions.forEach((function(e){if(e.name){var n=new Set;!function e(n,i){if("FragmentSpread"===n.kind)i.add(n.name.value);else if("VariableDefinition"===n.kind){var a=n.type;"NamedType"===a.kind&&i.add(a.name.value)}n.selectionSet&&n.selectionSet.selections.forEach((function(n){e(n,i)})),n.variableDefinitions&&n.variableDefinitions.forEach((function(n){e(n,i)})),n.definitions&&n.definitions.forEach((function(n){e(n,i)}))}(e,n),a[e.name.value]=n}})),e.exports=i,e.exports.updateEpicTitle=function(e,n){var i={kind:e.kind,definitions:[t(e,n)]};e.hasOwnProperty("loc")&&(i.loc=e.loc);var d=a[n]||new Set,r=new Set,o=new Set;for(d.forEach((function(e){o.add(e)}));o.size>0;){var s=o;o=new Set,s.forEach((function(e){r.has(e)||(r.add(e),(a[e]||new Set).forEach((function(e){o.add(e)})))}))}return r.forEach((function(n){var a=t(e,n);a&&i.definitions.push(a)})),i}(i,"updateEpicTitle")}}]);
//# sourceMappingURL=12.5a8ca336.chunk.js.map